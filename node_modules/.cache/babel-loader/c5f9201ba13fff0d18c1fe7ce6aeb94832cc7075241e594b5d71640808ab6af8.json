{"ast":null,"code":"var _jsxFileName = \"/Users/alexkissijr/Documents/Github/codebaby-demo-01/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback, useState } from 'react';\nimport { AvatarProvider } from '@codebaby-avatars/codebaby-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const aProviderRef = useRef(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  // You could set and unset codebaby events\n  // usign 'on' and 'off' methods by ref\n  // but it could not work as expected\n  // until the codebaby is fully initialized\n  // you could use by <AvatarProvider on'EventName'={...} />\n  useEffect(() => {\n    if (!isInitialized) return;\n    const onResponse = (e, responseData) => {\n      console.log('ResponseMessage', responseData);\n    };\n    const aProvider = aProviderRef.current;\n    if (aProvider) {\n      aProvider.on('response', onResponse);\n      return () => {\n        aProvider.off('response', onResponse);\n      };\n    }\n  }, [aProviderRef, isInitialized]);\n\n  // you can use ref to trigger the events too\n  const handleHello = useCallback(() => {\n    if (aProviderRef.current) {\n      console.log('Triggering playResponse');\n      //aProviderRef.current.trigger('playResponse', { answer: 'Hey! Wanna develop an app?' });\n      aProviderRef.current.trigger('ask', {\n        text: 'Hello'\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AvatarProvider\n  // on ref will provide you an events handler instance\n  // with listener (on, off) and emitter method\n  , {\n    ref: aProviderRef\n    // You could listen all codebaby events here\n    // using lowerCamelCase like 'initialized' should be 'onInitialized'\n    ,\n    onInitialized: () => {\n      console.log('onInitialized');\n      setIsInitialized(true);\n      handleHello();\n    },\n    id: \"react-avatar\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VsVkxsf7/mzqxBhvyyWwWLTtZAU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useState","AvatarProvider","jsxDEV","_jsxDEV","App","_s","aProviderRef","isInitialized","setIsInitialized","onResponse","e","responseData","console","log","aProvider","current","on","off","handleHello","trigger","text","ref","onInitialized","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alexkissijr/Documents/Github/codebaby-demo-01/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from 'react';\nimport { AvatarProvider } from '@codebaby-avatars/codebaby-react';\n\nfunction App() {\n  const aProviderRef = useRef(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  // You could set and unset codebaby events\n  // usign 'on' and 'off' methods by ref\n  // but it could not work as expected\n  // until the codebaby is fully initialized\n  // you could use by <AvatarProvider on'EventName'={...} />\n  useEffect(() => {\n    if(!isInitialized) return;\n    const onResponse = (e, responseData) => {\n      console.log('ResponseMessage', responseData);\n    };\n    const aProvider = aProviderRef.current;\n    if(aProvider) {\n      aProvider.on('response', onResponse);\n      return () => {\n        aProvider.off('response', onResponse);\n      }\n    }\n  }, [aProviderRef, isInitialized]);\n\n  // you can use ref to trigger the events too\n  const handleHello = useCallback(() => {\n    if(aProviderRef.current) {\n      console.log('Triggering playResponse')\n      //aProviderRef.current.trigger('playResponse', { answer: 'Hey! Wanna develop an app?' });\n      aProviderRef.current.trigger('ask', { text: 'Hello' });\n    }\n  }, []);\n\n  return (\n    <AvatarProvider\n      // on ref will provide you an events handler instance\n      // with listener (on, off) and emitter method\n      ref={aProviderRef}\n      // You could listen all codebaby events here\n      // using lowerCamelCase like 'initialized' should be 'onInitialized'\n      onInitialized={() => {\n        console.log('onInitialized')\n        setIsInitialized(true);\n        handleHello();\n      }}\n      id=\"react-avatar\">\n    </AvatarProvider>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AACvE,SAASC,cAAc,QAAQ,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,YAAY,GAAGT,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACzD;EACA;EACA;EACA;EACA;EACAF,SAAS,CAAC,MAAM;IACd,IAAG,CAACS,aAAa,EAAE;IACnB,MAAME,UAAU,GAAGA,CAACC,CAAC,EAAEC,YAAY,KAAK;MACtCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,YAAY,CAAC;IAC9C,CAAC;IACD,MAAMG,SAAS,GAAGR,YAAY,CAACS,OAAO;IACtC,IAAGD,SAAS,EAAE;MACZA,SAAS,CAACE,EAAE,CAAC,UAAU,EAAEP,UAAU,CAAC;MACpC,OAAO,MAAM;QACXK,SAAS,CAACG,GAAG,CAAC,UAAU,EAAER,UAAU,CAAC;MACvC,CAAC;IACH;EACF,CAAC,EAAE,CAACH,YAAY,EAAEC,aAAa,CAAC,CAAC;;EAEjC;EACA,MAAMW,WAAW,GAAGnB,WAAW,CAAC,MAAM;IACpC,IAAGO,YAAY,CAACS,OAAO,EAAE;MACvBH,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC;MACAP,YAAY,CAACS,OAAO,CAACI,OAAO,CAAC,KAAK,EAAE;QAAEC,IAAI,EAAE;MAAQ,CAAC,CAAC;IACxD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA,CAACF;EACC;EACA;EAAA;IACAoB,GAAG,EAAEf;IACL;IACA;IAAA;IACAgB,aAAa,EAAEA,CAAA,KAAM;MACnBV,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5BL,gBAAgB,CAAC,IAAI,CAAC;MACtBU,WAAW,CAAC,CAAC;IACf,CAAE;IACFK,EAAE,EAAC;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAErB;AAACtB,EAAA,CA9CQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}